//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Curie
{
	public class CurieRay
	{
		public float intensity_;
		public Dictionary<ModuleCurieAbsorber,float> dozes;
		public CurieRay( float intensity, RaycastHit[] hits, RaycastHit[] invHits)
		{
			intensity_ = intensity;
			var hits_ =  new List<RaycastHit>(hits);
			var invHits_ = new List<RaycastHit>(invHits);
			if(hits_.Count != invHits_.Count){
				this.LogError("hits and invHits has different length!");
				return;
			}
			hits_.Sort((a,b)=> (int)Mathf.Sign(a.distance-b.distance));
			invHits_.Sort((a,b)=> (int)Mathf.Sign(a.distance-b.distance));

			for(int i=0; i<hits_.Count; i++){
				//DebugUp(hits_[i].transform);
				var t =hits_[i].transform;
				Part p = t.GetComponent<Part>();
				if(p == null) continue;
				ModuleCurieAbsorber mca = p.FindModuleImplementing<ModuleCurieAbsorber>();
				if(mca == null){
					mca = (ModuleCurieAbsorber)p.AddModule("ModuleCurieAbsorber");
					//p.InitializeModules();
				}
				float distIn = CuriePlaceEmitter.RAYCAST_RANGE - hits_[i].distance - invHits_[hits_.Count-i-1].distance;
				float doze = intensity_*(1-Mathf.Exp(-ModuleCurieAbsorber.ABSORB_COEFF * distIn));
				intensity_ -= doze;
				doze *= CuriePlaceEmitter.UPDATE_RATE;
				mca.AddDoze(doze);
				//dozes[mca]
			}
		}

		void DebugUp(Transform t)
		{
			if(t == null ){
				this.Log("null transform");
				return;
			}

			this.Log(t.name);
			if( t.parent != null )
				DebugUp(t.parent);
			else
				this.Log("\n");
		}




	}
}

